import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ForumState, TopicMessage } from './types';
import { UserObject } from '@api/schema';

// TODO: —É–¥–∞–ª–∏—Ç—å, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –ê–ü–ò
const userMock: UserObject = {
  id: 0,
  first_name: 'Test',
  second_name: 'Bot',
  display_name: null,
  email: '',
  login: '',
  phone: '',
  avatar: null,
};

const messagesMock: TopicMessage[] = [
  { id: 0, text: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', user: userMock, createTimestamp: Date.now() },
  // eslint-disable-next-line max-len
  { id: 1, text: '* –≤–æ-–ø–µ—Ä–≤—ã—Ö, —è –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ\n* –≤–æ-–≤—Ç–æ—Ä—ã—Ö, —á—Ç–æ —Ç—ã –º–Ω–µ —Å–¥–µ–ª–∞–µ—à—å\n* –≤-—Ç—Ä–µ—Ç—å–∏—Ö, —è –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ', user: userMock, createTimestamp: Date.now() },
  // eslint-disable-next-line max-len
  { id: 2, text: '### –û—Ç–∑—ã–≤ –ø–æ –∏–≥—Ä–µ:\n\n **–û–Ω–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞! üòç**  \n–•–æ—á—É –µ—â–µ —É—Ä–æ–≤–Ω–µ–π', user: userMock, createTimestamp: Date.now() },
];

const topicsMock: ForumState['topics'] = [
  { id: 0, name: '–¢–µ–º–∞ ‚Ññ1', createTimestamp: Date.now(), messages: [messagesMock[0]] },
  { id: 1, name: '–¢–µ–º–∞ ‚Ññ2', createTimestamp: Date.now(), messages: [messagesMock[0]] },
  {
    id: 2,
    name: 'üî• –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º',
    createTimestamp: Date.now(),
    messages: messagesMock,
  },
];

const initialState: ForumState = {
  topics: topicsMock,
};

interface AddMessagePayload {
  topicId: number;
  message: TopicMessage;
}

const forum = createSlice({
  name: 'forum',
  initialState,
  reducers: {
    setTopics(state, { payload }: PayloadAction<ForumState['topics']>) {
      state.topics = payload;
    },
    addTopic(state, { payload }: PayloadAction<ForumState['topics'][number]>) {
      state.topics.unshift(payload);
    },
    addMessage(state, { payload }: PayloadAction<AddMessagePayload>) {
      const topic = state.topics.find((item) => item.id === payload.topicId);
      if (!topic) {
        return;
      }

      topic.messages.push(payload.message);
    },
  },
});

export const forumActions = forum.actions;
export const forumReducer = forum.reducer;
